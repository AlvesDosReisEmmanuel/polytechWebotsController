/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.kairos.webots.polycreate.statechart;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.rx.Observable;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class ControllerStateMachine implements IStatemachine {
	public enum State {
		MAIN_REGION_CLEANING,
		MAIN_REGION_WASTEDETECTED,
		MAIN_REGION_WASTERETRIEVED,
		MAIN_REGION_STOPPED,
		MAIN_REGION_DODGEOBSTACLE,
		MAIN_REGION_DODGEOBSTACLE_R1_DODGERIGHTOBSTACLE,
		MAIN_REGION_DODGEOBSTACLE_R1_DODGELEFTOBSTACLE,
		_REGION1_CHECKOBSTACLE,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[2];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(ControllerStateMachine.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(ControllerStateMachine.this) {
			this.isExecuting = value;
		}
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		synchronized(ControllerStateMachine.this) {
			return stateConfVectorPosition;
		}
	}
	
	protected void setStateConfVectorPosition(long value) {
		synchronized(ControllerStateMachine.this) {
			this.stateConfVectorPosition = value;
		}
	}
	public ControllerStateMachine() {
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setP(0);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_main_region_default();
		enterSequence__region1_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_main_region();
		exitSequence__region1();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		myEvent = false;
		obstacleNear = false;
		objectNear = false;
		nothingInFront = false;
		wasteDetected = false;
		wasteGripped = false;
		wasteSorted = false;
		obstacleDetected = false;
		noObstacle = false;
		start = false;
		rightObstacleDetected = false;
		leftObstacleDetected = false;
		stop = false;
	}
	
	private void microStep() {
		long transitioned = -1;
		
		stateConfVectorPosition = 0;
		
		switch (stateVector[0]) {
		case MAIN_REGION_CLEANING:
			transitioned = main_region_Cleaning_react(transitioned);
			break;
		case MAIN_REGION_WASTEDETECTED:
			transitioned = main_region_WasteDetected_react(transitioned);
			break;
		case MAIN_REGION_WASTERETRIEVED:
			transitioned = main_region_WasteRetrieved_react(transitioned);
			break;
		case MAIN_REGION_STOPPED:
			transitioned = main_region_Stopped_react(transitioned);
			break;
		case MAIN_REGION_DODGEOBSTACLE_R1_DODGERIGHTOBSTACLE:
			transitioned = main_region_DodgeObstacle_r1_DodgeRightObstacle_react(transitioned);
			break;
		case MAIN_REGION_DODGEOBSTACLE_R1_DODGELEFTOBSTACLE:
			transitioned = main_region_DodgeObstacle_r1_DodgeLeftObstacle_react(transitioned);
			break;
		default:
			break;
		}
		
		if (getStateConfVectorPosition()<1) {
			switch (stateVector[1]) {
			case _REGION1_CHECKOBSTACLE:
				transitioned = _region1_checkObstacle_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	private void runCycle() {
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
			
			nextEvent();
		} while (((((((((((((myEvent || obstacleNear) || objectNear) || nothingInFront) || wasteDetected) || wasteGripped) || wasteSorted) || obstacleDetected) || noObstacle) || start) || rightObstacleDetected) || leftObstacleDetected) || stop));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_CLEANING:
			return stateVector[0] == State.MAIN_REGION_CLEANING;
		case MAIN_REGION_WASTEDETECTED:
			return stateVector[0] == State.MAIN_REGION_WASTEDETECTED;
		case MAIN_REGION_WASTERETRIEVED:
			return stateVector[0] == State.MAIN_REGION_WASTERETRIEVED;
		case MAIN_REGION_STOPPED:
			return stateVector[0] == State.MAIN_REGION_STOPPED;
		case MAIN_REGION_DODGEOBSTACLE:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_DODGEOBSTACLE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_DODGEOBSTACLE_R1_DODGELEFTOBSTACLE.ordinal();
		case MAIN_REGION_DODGEOBSTACLE_R1_DODGERIGHTOBSTACLE:
			return stateVector[0] == State.MAIN_REGION_DODGEOBSTACLE_R1_DODGERIGHTOBSTACLE;
		case MAIN_REGION_DODGEOBSTACLE_R1_DODGELEFTOBSTACLE:
			return stateVector[0] == State.MAIN_REGION_DODGEOBSTACLE_R1_DODGELEFTOBSTACLE;
		case _REGION1_CHECKOBSTACLE:
			return stateVector[1] == State._REGION1_CHECKOBSTACLE;
		default:
			return false;
		}
	}
	
	
	private boolean myEvent;
	
	
	public void raiseMyEvent() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				myEvent = true;
			});
			runCycle();
		}
	}
	
	private boolean obstacleNear;
	
	
	public void raiseObstacleNear() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				obstacleNear = true;
			});
			runCycle();
		}
	}
	
	private boolean objectNear;
	
	
	public void raiseObjectNear() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				objectNear = true;
			});
			runCycle();
		}
	}
	
	private boolean nothingInFront;
	
	
	public void raiseNothingInFront() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				nothingInFront = true;
			});
			runCycle();
		}
	}
	
	private boolean wasteDetected;
	
	
	public void raiseWasteDetected() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				wasteDetected = true;
			});
			runCycle();
		}
	}
	
	private boolean wasteGripped;
	
	
	public void raiseWasteGripped() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				wasteGripped = true;
			});
			runCycle();
		}
	}
	
	private boolean wasteSorted;
	
	
	public void raiseWasteSorted() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				wasteSorted = true;
			});
			runCycle();
		}
	}
	
	private boolean obstacleDetected;
	
	
	public void raiseObstacleDetected() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				obstacleDetected = true;
			});
			runCycle();
		}
	}
	
	private boolean noObstacle;
	
	
	public void raiseNoObstacle() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				noObstacle = true;
			});
			runCycle();
		}
	}
	
	private boolean start;
	
	
	public void raiseStart() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				start = true;
			});
			runCycle();
		}
	}
	
	private boolean rightObstacleDetected;
	
	
	public void raiseRightObstacleDetected() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				rightObstacleDetected = true;
			});
			runCycle();
		}
	}
	
	private boolean leftObstacleDetected;
	
	
	public void raiseLeftObstacleDetected() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				leftObstacleDetected = true;
			});
			runCycle();
		}
	}
	
	private boolean stop;
	
	
	public void raiseStop() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				stop = true;
			});
			runCycle();
		}
	}
	
	private boolean turnLeft;
	
	
	protected void raiseTurnLeft() {
		synchronized(ControllerStateMachine.this) {
			turnLeft = true;
			turnLeftObservable.next(null);
		}
	}
	
	private Observable<Void> turnLeftObservable = new Observable<Void>();
	
	public Observable<Void> getTurnLeft() {
		return turnLeftObservable;
	}
	
	private boolean turnRight;
	
	
	protected void raiseTurnRight() {
		synchronized(ControllerStateMachine.this) {
			turnRight = true;
			turnRightObservable.next(null);
		}
	}
	
	private Observable<Void> turnRightObservable = new Observable<Void>();
	
	public Observable<Void> getTurnRight() {
		return turnRightObservable;
	}
	
	private boolean goForward;
	
	
	protected void raiseGoForward() {
		synchronized(ControllerStateMachine.this) {
			goForward = true;
			goForwardObservable.next(null);
		}
	}
	
	private Observable<Void> goForwardObservable = new Observable<Void>();
	
	public Observable<Void> getGoForward() {
		return goForwardObservable;
	}
	
	private boolean goBackward;
	
	
	protected void raiseGoBackward() {
		synchronized(ControllerStateMachine.this) {
			goBackward = true;
			goBackwardObservable.next(null);
		}
	}
	
	private Observable<Void> goBackwardObservable = new Observable<Void>();
	
	public Observable<Void> getGoBackward() {
		return goBackwardObservable;
	}
	
	private boolean dodgeRightObstacle;
	
	
	protected void raiseDodgeRightObstacle() {
		synchronized(ControllerStateMachine.this) {
			dodgeRightObstacle = true;
			dodgeRightObstacleObservable.next(null);
		}
	}
	
	private Observable<Void> dodgeRightObstacleObservable = new Observable<Void>();
	
	public Observable<Void> getDodgeRightObstacle() {
		return dodgeRightObstacleObservable;
	}
	
	private boolean dodgeLeftObstacle;
	
	
	protected void raiseDodgeLeftObstacle() {
		synchronized(ControllerStateMachine.this) {
			dodgeLeftObstacle = true;
			dodgeLeftObstacleObservable.next(null);
		}
	}
	
	private Observable<Void> dodgeLeftObstacleObservable = new Observable<Void>();
	
	public Observable<Void> getDodgeLeftObstacle() {
		return dodgeLeftObstacleObservable;
	}
	
	private boolean cleanWaste;
	
	
	protected void raiseCleanWaste() {
		synchronized(ControllerStateMachine.this) {
			cleanWaste = true;
			cleanWasteObservable.next(null);
		}
	}
	
	private Observable<Void> cleanWasteObservable = new Observable<Void>();
	
	public Observable<Void> getCleanWaste() {
		return cleanWasteObservable;
	}
	
	private boolean retrieveWaste;
	
	
	protected void raiseRetrieveWaste() {
		synchronized(ControllerStateMachine.this) {
			retrieveWaste = true;
			retrieveWasteObservable.next(null);
		}
	}
	
	private Observable<Void> retrieveWasteObservable = new Observable<Void>();
	
	public Observable<Void> getRetrieveWaste() {
		return retrieveWasteObservable;
	}
	
	private boolean cleaning;
	
	
	protected void raiseCleaning() {
		synchronized(ControllerStateMachine.this) {
			cleaning = true;
			cleaningObservable.next(null);
		}
	}
	
	private Observable<Void> cleaningObservable = new Observable<Void>();
	
	public Observable<Void> getCleaning() {
		return cleaningObservable;
	}
	
	private boolean checkObstacle;
	
	
	protected void raiseCheckObstacle() {
		synchronized(ControllerStateMachine.this) {
			checkObstacle = true;
			checkObstacleObservable.next(null);
		}
	}
	
	private Observable<Void> checkObstacleObservable = new Observable<Void>();
	
	public Observable<Void> getCheckObstacle() {
		return checkObstacleObservable;
	}
	
	private long p;
	
	public synchronized long getP() {
		synchronized(ControllerStateMachine.this) {
			return p;
		}
	}
	
	public void setP(long value) {
		synchronized(ControllerStateMachine.this) {
			this.p = value;
		}
	}
	
	/* Entry action for state 'Cleaning'. */
	private void entryAction_main_region_Cleaning() {
		raiseCleaning();
	}
	
	/* Entry action for state 'WasteDetected'. */
	private void entryAction_main_region_WasteDetected() {
		raiseRetrieveWaste();
	}
	
	/* Entry action for state 'WasteRetrieved'. */
	private void entryAction_main_region_WasteRetrieved() {
		raiseCleanWaste();
	}
	
	/* Entry action for state 'DodgeRightObstacle'. */
	private void entryAction_main_region_DodgeObstacle_r1_DodgeRightObstacle() {
		raiseDodgeRightObstacle();
	}
	
	/* Entry action for state 'DodgeLeftObstacle'. */
	private void entryAction_main_region_DodgeObstacle_r1_DodgeLeftObstacle() {
		raiseDodgeLeftObstacle();
	}
	
	/* Entry action for state 'checkObstacle'. */
	private void entryAction__region1_checkObstacle() {
		raiseCheckObstacle();
	}
	
	/* 'default' enter sequence for state Cleaning */
	private void enterSequence_main_region_Cleaning_default() {
		entryAction_main_region_Cleaning();
		stateVector[0] = State.MAIN_REGION_CLEANING;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state WasteDetected */
	private void enterSequence_main_region_WasteDetected_default() {
		entryAction_main_region_WasteDetected();
		stateVector[0] = State.MAIN_REGION_WASTEDETECTED;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state WasteRetrieved */
	private void enterSequence_main_region_WasteRetrieved_default() {
		entryAction_main_region_WasteRetrieved();
		stateVector[0] = State.MAIN_REGION_WASTERETRIEVED;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Stopped */
	private void enterSequence_main_region_Stopped_default() {
		stateVector[0] = State.MAIN_REGION_STOPPED;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state DodgeRightObstacle */
	private void enterSequence_main_region_DodgeObstacle_r1_DodgeRightObstacle_default() {
		entryAction_main_region_DodgeObstacle_r1_DodgeRightObstacle();
		stateVector[0] = State.MAIN_REGION_DODGEOBSTACLE_R1_DODGERIGHTOBSTACLE;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state DodgeLeftObstacle */
	private void enterSequence_main_region_DodgeObstacle_r1_DodgeLeftObstacle_default() {
		entryAction_main_region_DodgeObstacle_r1_DodgeLeftObstacle();
		stateVector[0] = State.MAIN_REGION_DODGEOBSTACLE_R1_DODGELEFTOBSTACLE;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state checkObstacle */
	private void enterSequence__region1_checkObstacle_default() {
		entryAction__region1_checkObstacle();
		stateVector[1] = State._REGION1_CHECKOBSTACLE;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region null */
	private void enterSequence__region1_default() {
		react__region1__entry_Default();
	}
	
	/* Default exit sequence for state Cleaning */
	private void exitSequence_main_region_Cleaning() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state WasteDetected */
	private void exitSequence_main_region_WasteDetected() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state WasteRetrieved */
	private void exitSequence_main_region_WasteRetrieved() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Stopped */
	private void exitSequence_main_region_Stopped() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state DodgeObstacle */
	private void exitSequence_main_region_DodgeObstacle() {
		exitSequence_main_region_DodgeObstacle_r1();
	}
	
	/* Default exit sequence for state DodgeRightObstacle */
	private void exitSequence_main_region_DodgeObstacle_r1_DodgeRightObstacle() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state DodgeLeftObstacle */
	private void exitSequence_main_region_DodgeObstacle_r1_DodgeLeftObstacle() {
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state checkObstacle */
	private void exitSequence__region1_checkObstacle() {
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_CLEANING:
			exitSequence_main_region_Cleaning();
			break;
		case MAIN_REGION_WASTEDETECTED:
			exitSequence_main_region_WasteDetected();
			break;
		case MAIN_REGION_WASTERETRIEVED:
			exitSequence_main_region_WasteRetrieved();
			break;
		case MAIN_REGION_STOPPED:
			exitSequence_main_region_Stopped();
			break;
		case MAIN_REGION_DODGEOBSTACLE_R1_DODGERIGHTOBSTACLE:
			exitSequence_main_region_DodgeObstacle_r1_DodgeRightObstacle();
			break;
		case MAIN_REGION_DODGEOBSTACLE_R1_DODGELEFTOBSTACLE:
			exitSequence_main_region_DodgeObstacle_r1_DodgeLeftObstacle();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_DodgeObstacle_r1() {
		switch (stateVector[0]) {
		case MAIN_REGION_DODGEOBSTACLE_R1_DODGERIGHTOBSTACLE:
			exitSequence_main_region_DodgeObstacle_r1_DodgeRightObstacle();
			break;
		case MAIN_REGION_DODGEOBSTACLE_R1_DODGELEFTOBSTACLE:
			exitSequence_main_region_DodgeObstacle_r1_DodgeLeftObstacle();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region null */
	private void exitSequence__region1() {
		switch (stateVector[1]) {
		case _REGION1_CHECKOBSTACLE:
			exitSequence__region1_checkObstacle();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Stopped_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react__region1__entry_Default() {
		enterSequence__region1_checkObstacle_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_region_Cleaning_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (wasteDetected) {
				exitSequence_main_region_Cleaning();
				enterSequence_main_region_WasteDetected_default();
				transitioned_after = 0;
			} else {
				if (rightObstacleDetected) {
					exitSequence_main_region_Cleaning();
					enterSequence_main_region_DodgeObstacle_r1_DodgeRightObstacle_default();
					transitioned_after = 0;
				} else {
					if (leftObstacleDetected) {
						exitSequence_main_region_Cleaning();
						enterSequence_main_region_DodgeObstacle_r1_DodgeLeftObstacle_default();
						transitioned_after = 0;
					}
				}
			}
		}
		return transitioned_after;
	}
	
	private long main_region_WasteDetected_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (wasteGripped) {
				exitSequence_main_region_WasteDetected();
				enterSequence_main_region_WasteRetrieved_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_WasteRetrieved_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (wasteSorted) {
				exitSequence_main_region_WasteRetrieved();
				enterSequence_main_region_Cleaning_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_Stopped_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (start) {
				exitSequence_main_region_Stopped();
				enterSequence_main_region_Cleaning_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_DodgeObstacle_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (noObstacle) {
				exitSequence_main_region_DodgeObstacle();
				enterSequence_main_region_Cleaning_default();
				transitioned_after = 0;
			}
		}
		return transitioned_after;
	}
	
	private long main_region_DodgeObstacle_r1_DodgeRightObstacle_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_DodgeObstacle_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_DodgeObstacle_r1_DodgeLeftObstacle_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_DodgeObstacle_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long _region1_checkObstacle_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<1) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
