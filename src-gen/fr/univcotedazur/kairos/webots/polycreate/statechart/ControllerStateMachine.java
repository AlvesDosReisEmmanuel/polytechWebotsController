/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.kairos.webots.polycreate.statechart;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.rx.Observable;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class ControllerStateMachine implements IStatemachine {
	public enum State {
		MAIN_REGION_STOPPED,
		MAIN_REGION_RELEASINGWASTE,
		MAIN_REGION_NEARWASTE,
		MAIN_REGION_MOVING,
		MAIN_REGION_MOVING_INNER_REGION_WASTEGRABBED,
		MAIN_REGION_MOVING_INNER_REGION_FORWARD,
		MAIN_REGION_MOVING_INNER_REGION_WASTEDETECTED,
		MAIN_REGION_DODGEOBSTACLE,
		MAIN_REGION_DODGEOBSTACLE_R1_DODGERIGHTOBSTACLE,
		MAIN_REGION_DODGEOBSTACLE_R1_DODGELEFTOBSTACLE,
		MAIN_REGION_DODGEVIRTUALWALL,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[1];
	private final State[] stateVector = new State[1];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(ControllerStateMachine.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(ControllerStateMachine.this) {
			this.isExecuting = value;
		}
	}
	public ControllerStateMachine() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 1; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setObstacleDetectedBool(false);
		
		setTurnFinished(false);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		myEvent = false;
		obstacleNear = false;
		frontRight = false;
		frontLeft = false;
		front = false;
		clear = false;
		virtualWall = false;
		obstacleDetected = false;
		noObstacle = false;
		start = false;
		stop = false;
		nearWaste = false;
		atGarbageDisposal = false;
		wasteDetected = false;
		wasteGripped = false;
		wasteReleased = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_STOPPED:
			main_region_Stopped_react(-1);
			break;
		case MAIN_REGION_RELEASINGWASTE:
			main_region_ReleasingWaste_react(-1);
			break;
		case MAIN_REGION_NEARWASTE:
			main_region_NearWaste_react(-1);
			break;
		case MAIN_REGION_MOVING_INNER_REGION_WASTEGRABBED:
			main_region_Moving_inner_region_WasteGrabbed_react(-1);
			break;
		case MAIN_REGION_MOVING_INNER_REGION_FORWARD:
			main_region_Moving_inner_region_Forward_react(-1);
			break;
		case MAIN_REGION_MOVING_INNER_REGION_WASTEDETECTED:
			main_region_Moving_inner_region_WasteDetected_react(-1);
			break;
		case MAIN_REGION_DODGEOBSTACLE_R1_DODGERIGHTOBSTACLE:
			main_region_DodgeObstacle_r1_DodgeRightObstacle_react(-1);
			break;
		case MAIN_REGION_DODGEOBSTACLE_R1_DODGELEFTOBSTACLE:
			main_region_DodgeObstacle_r1_DodgeLeftObstacle_react(-1);
			break;
		case MAIN_REGION_DODGEVIRTUALWALL:
			main_region_DodgeVirtualWall_react(-1);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
			
			nextEvent();
		} while ((((((((((((((((myEvent || obstacleNear) || frontRight) || frontLeft) || front) || clear) || virtualWall) || obstacleDetected) || noObstacle) || start) || stop) || nearWaste) || atGarbageDisposal) || wasteDetected) || wasteGripped) || wasteReleased));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_STOPPED:
			return stateVector[0] == State.MAIN_REGION_STOPPED;
		case MAIN_REGION_RELEASINGWASTE:
			return stateVector[0] == State.MAIN_REGION_RELEASINGWASTE;
		case MAIN_REGION_NEARWASTE:
			return stateVector[0] == State.MAIN_REGION_NEARWASTE;
		case MAIN_REGION_MOVING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_MOVING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_MOVING_INNER_REGION_WASTEDETECTED.ordinal();
		case MAIN_REGION_MOVING_INNER_REGION_WASTEGRABBED:
			return stateVector[0] == State.MAIN_REGION_MOVING_INNER_REGION_WASTEGRABBED;
		case MAIN_REGION_MOVING_INNER_REGION_FORWARD:
			return stateVector[0] == State.MAIN_REGION_MOVING_INNER_REGION_FORWARD;
		case MAIN_REGION_MOVING_INNER_REGION_WASTEDETECTED:
			return stateVector[0] == State.MAIN_REGION_MOVING_INNER_REGION_WASTEDETECTED;
		case MAIN_REGION_DODGEOBSTACLE:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_DODGEOBSTACLE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_DODGEOBSTACLE_R1_DODGELEFTOBSTACLE.ordinal();
		case MAIN_REGION_DODGEOBSTACLE_R1_DODGERIGHTOBSTACLE:
			return stateVector[0] == State.MAIN_REGION_DODGEOBSTACLE_R1_DODGERIGHTOBSTACLE;
		case MAIN_REGION_DODGEOBSTACLE_R1_DODGELEFTOBSTACLE:
			return stateVector[0] == State.MAIN_REGION_DODGEOBSTACLE_R1_DODGELEFTOBSTACLE;
		case MAIN_REGION_DODGEVIRTUALWALL:
			return stateVector[0] == State.MAIN_REGION_DODGEVIRTUALWALL;
		default:
			return false;
		}
	}
	
	
	private boolean myEvent;
	
	
	public void raiseMyEvent() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				myEvent = true;
			});
			runCycle();
		}
	}
	
	private boolean obstacleNear;
	
	
	public void raiseObstacleNear() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				obstacleNear = true;
			});
			runCycle();
		}
	}
	
	private boolean frontRight;
	
	
	public void raiseFrontRight() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				frontRight = true;
			});
			runCycle();
		}
	}
	
	private boolean frontLeft;
	
	
	public void raiseFrontLeft() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				frontLeft = true;
			});
			runCycle();
		}
	}
	
	private boolean front;
	
	
	public void raiseFront() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				front = true;
			});
			runCycle();
		}
	}
	
	private boolean clear;
	
	
	public void raiseClear() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				clear = true;
			});
			runCycle();
		}
	}
	
	private boolean virtualWall;
	
	
	public void raiseVirtualWall() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				virtualWall = true;
			});
			runCycle();
		}
	}
	
	private boolean obstacleDetected;
	
	
	public void raiseObstacleDetected() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				obstacleDetected = true;
			});
			runCycle();
		}
	}
	
	private boolean noObstacle;
	
	
	public void raiseNoObstacle() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				noObstacle = true;
			});
			runCycle();
		}
	}
	
	private boolean start;
	
	
	public void raiseStart() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				start = true;
			});
			runCycle();
		}
	}
	
	private boolean stop;
	
	
	public void raiseStop() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				stop = true;
			});
			runCycle();
		}
	}
	
	private boolean nearWaste;
	
	
	public void raiseNearWaste() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				nearWaste = true;
			});
			runCycle();
		}
	}
	
	private boolean atGarbageDisposal;
	
	
	public void raiseAtGarbageDisposal() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				atGarbageDisposal = true;
			});
			runCycle();
		}
	}
	
	private boolean wasteDetected;
	
	
	public void raiseWasteDetected() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				wasteDetected = true;
			});
			runCycle();
		}
	}
	
	private boolean wasteGripped;
	
	
	public void raiseWasteGripped() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				wasteGripped = true;
			});
			runCycle();
		}
	}
	
	private boolean wasteReleased;
	
	
	public void raiseWasteReleased() {
		synchronized(ControllerStateMachine.this) {
			inEventQueue.add(() -> {
				wasteReleased = true;
			});
			runCycle();
		}
	}
	
	private boolean turnLeft;
	
	
	protected void raiseTurnLeft() {
		synchronized(ControllerStateMachine.this) {
			turnLeft = true;
			turnLeftObservable.next(null);
		}
	}
	
	private Observable<Void> turnLeftObservable = new Observable<Void>();
	
	public Observable<Void> getTurnLeft() {
		return turnLeftObservable;
	}
	
	private boolean turnRight;
	
	
	protected void raiseTurnRight() {
		synchronized(ControllerStateMachine.this) {
			turnRight = true;
			turnRightObservable.next(null);
		}
	}
	
	private Observable<Void> turnRightObservable = new Observable<Void>();
	
	public Observable<Void> getTurnRight() {
		return turnRightObservable;
	}
	
	private boolean fullTurn;
	
	
	protected void raiseFullTurn() {
		synchronized(ControllerStateMachine.this) {
			fullTurn = true;
			fullTurnObservable.next(null);
		}
	}
	
	private Observable<Void> fullTurnObservable = new Observable<Void>();
	
	public Observable<Void> getFullTurn() {
		return fullTurnObservable;
	}
	
	private boolean goForward;
	
	
	protected void raiseGoForward() {
		synchronized(ControllerStateMachine.this) {
			goForward = true;
			goForwardObservable.next(null);
		}
	}
	
	private Observable<Void> goForwardObservable = new Observable<Void>();
	
	public Observable<Void> getGoForward() {
		return goForwardObservable;
	}
	
	private boolean goBackward;
	
	
	protected void raiseGoBackward() {
		synchronized(ControllerStateMachine.this) {
			goBackward = true;
			goBackwardObservable.next(null);
		}
	}
	
	private Observable<Void> goBackwardObservable = new Observable<Void>();
	
	public Observable<Void> getGoBackward() {
		return goBackwardObservable;
	}
	
	private boolean dodgeObstacle;
	
	
	protected void raiseDodgeObstacle() {
		synchronized(ControllerStateMachine.this) {
			dodgeObstacle = true;
			dodgeObstacleObservable.next(null);
		}
	}
	
	private Observable<Void> dodgeObstacleObservable = new Observable<Void>();
	
	public Observable<Void> getDodgeObstacle() {
		return dodgeObstacleObservable;
	}
	
	private boolean checkObstacle;
	
	
	protected void raiseCheckObstacle() {
		synchronized(ControllerStateMachine.this) {
			checkObstacle = true;
			checkObstacleObservable.next(null);
		}
	}
	
	private Observable<Void> checkObstacleObservable = new Observable<Void>();
	
	public Observable<Void> getCheckObstacle() {
		return checkObstacleObservable;
	}
	
	private boolean goToWaste;
	
	
	protected void raiseGoToWaste() {
		synchronized(ControllerStateMachine.this) {
			goToWaste = true;
			goToWasteObservable.next(null);
		}
	}
	
	private Observable<Void> goToWasteObservable = new Observable<Void>();
	
	public Observable<Void> getGoToWaste() {
		return goToWasteObservable;
	}
	
	private boolean grabWaste;
	
	
	protected void raiseGrabWaste() {
		synchronized(ControllerStateMachine.this) {
			grabWaste = true;
			grabWasteObservable.next(null);
		}
	}
	
	private Observable<Void> grabWasteObservable = new Observable<Void>();
	
	public Observable<Void> getGrabWaste() {
		return grabWasteObservable;
	}
	
	private boolean movingWaste;
	
	
	protected void raiseMovingWaste() {
		synchronized(ControllerStateMachine.this) {
			movingWaste = true;
			movingWasteObservable.next(null);
		}
	}
	
	private Observable<Void> movingWasteObservable = new Observable<Void>();
	
	public Observable<Void> getMovingWaste() {
		return movingWasteObservable;
	}
	
	private boolean releasingWaste;
	
	
	protected void raiseReleasingWaste() {
		synchronized(ControllerStateMachine.this) {
			releasingWaste = true;
			releasingWasteObservable.next(null);
		}
	}
	
	private Observable<Void> releasingWasteObservable = new Observable<Void>();
	
	public Observable<Void> getReleasingWaste() {
		return releasingWasteObservable;
	}
	
	private boolean obstacleDetectedBool;
	
	public synchronized boolean getObstacleDetectedBool() {
		synchronized(ControllerStateMachine.this) {
			return obstacleDetectedBool;
		}
	}
	
	public void setObstacleDetectedBool(boolean value) {
		synchronized(ControllerStateMachine.this) {
			this.obstacleDetectedBool = value;
		}
	}
	
	private boolean turnFinished;
	
	public synchronized boolean getTurnFinished() {
		synchronized(ControllerStateMachine.this) {
			return turnFinished;
		}
	}
	
	public void setTurnFinished(boolean value) {
		synchronized(ControllerStateMachine.this) {
			this.turnFinished = value;
		}
	}
	
	/* Entry action for state 'ReleasingWaste'. */
	private void entryAction_main_region_ReleasingWaste() {
		raiseReleasingWaste();
	}
	
	/* Entry action for state 'NearWaste'. */
	private void entryAction_main_region_NearWaste() {
		raiseGrabWaste();
	}
	
	/* Entry action for state 'WasteGrabbed'. */
	private void entryAction_main_region_Moving_inner_region_WasteGrabbed() {
		raiseMovingWaste();
	}
	
	/* Entry action for state 'Forward'. */
	private void entryAction_main_region_Moving_inner_region_Forward() {
		raiseGoForward();
	}
	
	/* Entry action for state 'WasteDetected'. */
	private void entryAction_main_region_Moving_inner_region_WasteDetected() {
		raiseGoToWaste();
	}
	
	/* Entry action for state 'DodgeRightObstacle'. */
	private void entryAction_main_region_DodgeObstacle_r1_DodgeRightObstacle() {
		raiseGoBackward();
		
		raiseTurnRight();
	}
	
	/* Entry action for state 'DodgeLeftObstacle'. */
	private void entryAction_main_region_DodgeObstacle_r1_DodgeLeftObstacle() {
		raiseGoBackward();
		
		raiseTurnLeft();
	}
	
	/* Entry action for state 'DodgeVirtualWall'. */
	private void entryAction_main_region_DodgeVirtualWall() {
		raiseFullTurn();
	}
	
	/* 'default' enter sequence for state Stopped */
	private void enterSequence_main_region_Stopped_default() {
		stateVector[0] = State.MAIN_REGION_STOPPED;
	}
	
	/* 'default' enter sequence for state ReleasingWaste */
	private void enterSequence_main_region_ReleasingWaste_default() {
		entryAction_main_region_ReleasingWaste();
		stateVector[0] = State.MAIN_REGION_RELEASINGWASTE;
	}
	
	/* 'default' enter sequence for state NearWaste */
	private void enterSequence_main_region_NearWaste_default() {
		entryAction_main_region_NearWaste();
		stateVector[0] = State.MAIN_REGION_NEARWASTE;
	}
	
	/* 'default' enter sequence for state Moving */
	private void enterSequence_main_region_Moving_default() {
		enterSequence_main_region_Moving_inner_region_default();
	}
	
	/* 'default' enter sequence for state WasteGrabbed */
	private void enterSequence_main_region_Moving_inner_region_WasteGrabbed_default() {
		entryAction_main_region_Moving_inner_region_WasteGrabbed();
		stateVector[0] = State.MAIN_REGION_MOVING_INNER_REGION_WASTEGRABBED;
	}
	
	/* 'default' enter sequence for state Forward */
	private void enterSequence_main_region_Moving_inner_region_Forward_default() {
		entryAction_main_region_Moving_inner_region_Forward();
		stateVector[0] = State.MAIN_REGION_MOVING_INNER_REGION_FORWARD;
	}
	
	/* 'default' enter sequence for state WasteDetected */
	private void enterSequence_main_region_Moving_inner_region_WasteDetected_default() {
		entryAction_main_region_Moving_inner_region_WasteDetected();
		stateVector[0] = State.MAIN_REGION_MOVING_INNER_REGION_WASTEDETECTED;
	}
	
	/* 'default' enter sequence for state DodgeRightObstacle */
	private void enterSequence_main_region_DodgeObstacle_r1_DodgeRightObstacle_default() {
		entryAction_main_region_DodgeObstacle_r1_DodgeRightObstacle();
		stateVector[0] = State.MAIN_REGION_DODGEOBSTACLE_R1_DODGERIGHTOBSTACLE;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state DodgeLeftObstacle */
	private void enterSequence_main_region_DodgeObstacle_r1_DodgeLeftObstacle_default() {
		entryAction_main_region_DodgeObstacle_r1_DodgeLeftObstacle();
		stateVector[0] = State.MAIN_REGION_DODGEOBSTACLE_R1_DODGELEFTOBSTACLE;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state DodgeVirtualWall */
	private void enterSequence_main_region_DodgeVirtualWall_default() {
		entryAction_main_region_DodgeVirtualWall();
		stateVector[0] = State.MAIN_REGION_DODGEVIRTUALWALL;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region inner region */
	private void enterSequence_main_region_Moving_inner_region_default() {
		react_main_region_Moving_inner_region__entry_Default();
	}
	
	/* Default exit sequence for state Stopped */
	private void exitSequence_main_region_Stopped() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state ReleasingWaste */
	private void exitSequence_main_region_ReleasingWaste() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state NearWaste */
	private void exitSequence_main_region_NearWaste() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Moving */
	private void exitSequence_main_region_Moving() {
		exitSequence_main_region_Moving_inner_region();
	}
	
	/* Default exit sequence for state WasteGrabbed */
	private void exitSequence_main_region_Moving_inner_region_WasteGrabbed() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Forward */
	private void exitSequence_main_region_Moving_inner_region_Forward() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state WasteDetected */
	private void exitSequence_main_region_Moving_inner_region_WasteDetected() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state DodgeObstacle */
	private void exitSequence_main_region_DodgeObstacle() {
		exitSequence_main_region_DodgeObstacle_r1();
	}
	
	/* Default exit sequence for state DodgeRightObstacle */
	private void exitSequence_main_region_DodgeObstacle_r1_DodgeRightObstacle() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state DodgeLeftObstacle */
	private void exitSequence_main_region_DodgeObstacle_r1_DodgeLeftObstacle() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state DodgeVirtualWall */
	private void exitSequence_main_region_DodgeVirtualWall() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_STOPPED:
			exitSequence_main_region_Stopped();
			break;
		case MAIN_REGION_RELEASINGWASTE:
			exitSequence_main_region_ReleasingWaste();
			break;
		case MAIN_REGION_NEARWASTE:
			exitSequence_main_region_NearWaste();
			break;
		case MAIN_REGION_MOVING_INNER_REGION_WASTEGRABBED:
			exitSequence_main_region_Moving_inner_region_WasteGrabbed();
			break;
		case MAIN_REGION_MOVING_INNER_REGION_FORWARD:
			exitSequence_main_region_Moving_inner_region_Forward();
			break;
		case MAIN_REGION_MOVING_INNER_REGION_WASTEDETECTED:
			exitSequence_main_region_Moving_inner_region_WasteDetected();
			break;
		case MAIN_REGION_DODGEOBSTACLE_R1_DODGERIGHTOBSTACLE:
			exitSequence_main_region_DodgeObstacle_r1_DodgeRightObstacle();
			break;
		case MAIN_REGION_DODGEOBSTACLE_R1_DODGELEFTOBSTACLE:
			exitSequence_main_region_DodgeObstacle_r1_DodgeLeftObstacle();
			break;
		case MAIN_REGION_DODGEVIRTUALWALL:
			exitSequence_main_region_DodgeVirtualWall();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region inner region */
	private void exitSequence_main_region_Moving_inner_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_MOVING_INNER_REGION_WASTEGRABBED:
			exitSequence_main_region_Moving_inner_region_WasteGrabbed();
			break;
		case MAIN_REGION_MOVING_INNER_REGION_FORWARD:
			exitSequence_main_region_Moving_inner_region_Forward();
			break;
		case MAIN_REGION_MOVING_INNER_REGION_WASTEDETECTED:
			exitSequence_main_region_Moving_inner_region_WasteDetected();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_DodgeObstacle_r1() {
		switch (stateVector[0]) {
		case MAIN_REGION_DODGEOBSTACLE_R1_DODGERIGHTOBSTACLE:
			exitSequence_main_region_DodgeObstacle_r1_DodgeRightObstacle();
			break;
		case MAIN_REGION_DODGEOBSTACLE_R1_DODGELEFTOBSTACLE:
			exitSequence_main_region_DodgeObstacle_r1_DodgeLeftObstacle();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Stopped_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Moving_inner_region__entry_Default() {
		enterSequence_main_region_Moving_inner_region_Forward_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_region_Stopped_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (start) {
				exitSequence_main_region_Stopped();
				raiseGoForward();
				
				enterSequence_main_region_Moving_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_ReleasingWaste_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (wasteReleased) {
				exitSequence_main_region_ReleasingWaste();
				enterSequence_main_region_Moving_inner_region_Forward_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_NearWaste_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (wasteGripped) {
				exitSequence_main_region_NearWaste();
				enterSequence_main_region_Moving_inner_region_WasteGrabbed_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Moving_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (virtualWall) {
				exitSequence_main_region_Moving();
				enterSequence_main_region_DodgeVirtualWall_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Moving_inner_region_WasteGrabbed_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (atGarbageDisposal) {
				exitSequence_main_region_Moving();
				enterSequence_main_region_ReleasingWaste_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_Moving_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Moving_inner_region_Forward_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (wasteDetected) {
				exitSequence_main_region_Moving_inner_region_Forward();
				enterSequence_main_region_Moving_inner_region_WasteDetected_default();
				main_region_Moving_react(0);
				
				transitioned_after = 0;
			} else {
				if (frontRight) {
					exitSequence_main_region_Moving();
					enterSequence_main_region_DodgeObstacle_r1_DodgeRightObstacle_default();
					react(0);
					
					transitioned_after = 0;
				} else {
					if (frontLeft) {
						exitSequence_main_region_Moving();
						enterSequence_main_region_DodgeObstacle_r1_DodgeLeftObstacle_default();
						react(0);
						
						transitioned_after = 0;
					} else {
						if (front) {
							exitSequence_main_region_Moving();
							enterSequence_main_region_DodgeObstacle_r1_DodgeRightObstacle_default();
							react(0);
							
							transitioned_after = 0;
						}
					}
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_Moving_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_Moving_inner_region_WasteDetected_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (nearWaste) {
				exitSequence_main_region_Moving();
				enterSequence_main_region_NearWaste_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_Moving_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_DodgeObstacle_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (clear) {
				exitSequence_main_region_DodgeObstacle();
				enterSequence_main_region_Moving_inner_region_Forward_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_DodgeObstacle_r1_DodgeRightObstacle_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_DodgeObstacle_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_DodgeObstacle_r1_DodgeLeftObstacle_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_region_DodgeObstacle_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_region_DodgeVirtualWall_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (clear) {
				exitSequence_main_region_DodgeVirtualWall();
				enterSequence_main_region_Moving_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
